// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: pb/poker.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Poker 扑克.
type Poker int32

const (
	// Back 背面.
	Poker_back Poker = 0
	// HeartA 红桃A.
	Poker_heartA  Poker = 1
	Poker_heart2  Poker = 2
	Poker_heart3  Poker = 3
	Poker_heart4  Poker = 4
	Poker_heart5  Poker = 5
	Poker_heart6  Poker = 6
	Poker_heart7  Poker = 7
	Poker_heart8  Poker = 8
	Poker_heart9  Poker = 9
	Poker_heart10 Poker = 10
	Poker_heartJ  Poker = 11
	Poker_heartQ  Poker = 12
	Poker_heartK  Poker = 13
	// ClubA 梅花A.
	Poker_clubA  Poker = 14
	Poker_club2  Poker = 15
	Poker_club3  Poker = 16
	Poker_club4  Poker = 17
	Poker_club5  Poker = 18
	Poker_club6  Poker = 19
	Poker_club7  Poker = 20
	Poker_club8  Poker = 21
	Poker_club9  Poker = 22
	Poker_club10 Poker = 23
	Poker_clubJ  Poker = 24
	Poker_clubQ  Poker = 25
	Poker_clubK  Poker = 26
	// DiamondA 方块A.
	Poker_diamondA  Poker = 27
	Poker_diamond2  Poker = 28
	Poker_diamond3  Poker = 29
	Poker_diamond4  Poker = 30
	Poker_diamond5  Poker = 31
	Poker_diamond6  Poker = 32
	Poker_diamond7  Poker = 33
	Poker_diamond8  Poker = 34
	Poker_diamond9  Poker = 35
	Poker_diamond10 Poker = 36
	Poker_diamondJ  Poker = 37
	Poker_diamondQ  Poker = 38
	Poker_diamondK  Poker = 39
	// SpadeA 黑桃A.
	Poker_spadeA  Poker = 40
	Poker_spade2  Poker = 41
	Poker_spade3  Poker = 42
	Poker_spade4  Poker = 43
	Poker_spade5  Poker = 44
	Poker_spade6  Poker = 45
	Poker_spade7  Poker = 46
	Poker_spade8  Poker = 47
	Poker_spade9  Poker = 48
	Poker_spade10 Poker = 49
	Poker_spadeJ  Poker = 50
	Poker_spadeQ  Poker = 51
	Poker_spadeK  Poker = 52
	// Joker1 大王.
	Poker_joker1 Poker = 53
	// Joker2 小王.
	Poker_joker2 Poker = 54
)

// Enum value maps for Poker.
var (
	Poker_name = map[int32]string{
		0:  "back",
		1:  "heartA",
		2:  "heart2",
		3:  "heart3",
		4:  "heart4",
		5:  "heart5",
		6:  "heart6",
		7:  "heart7",
		8:  "heart8",
		9:  "heart9",
		10: "heart10",
		11: "heartJ",
		12: "heartQ",
		13: "heartK",
		14: "clubA",
		15: "club2",
		16: "club3",
		17: "club4",
		18: "club5",
		19: "club6",
		20: "club7",
		21: "club8",
		22: "club9",
		23: "club10",
		24: "clubJ",
		25: "clubQ",
		26: "clubK",
		27: "diamondA",
		28: "diamond2",
		29: "diamond3",
		30: "diamond4",
		31: "diamond5",
		32: "diamond6",
		33: "diamond7",
		34: "diamond8",
		35: "diamond9",
		36: "diamond10",
		37: "diamondJ",
		38: "diamondQ",
		39: "diamondK",
		40: "spadeA",
		41: "spade2",
		42: "spade3",
		43: "spade4",
		44: "spade5",
		45: "spade6",
		46: "spade7",
		47: "spade8",
		48: "spade9",
		49: "spade10",
		50: "spadeJ",
		51: "spadeQ",
		52: "spadeK",
		53: "joker1",
		54: "joker2",
	}
	Poker_value = map[string]int32{
		"back":      0,
		"heartA":    1,
		"heart2":    2,
		"heart3":    3,
		"heart4":    4,
		"heart5":    5,
		"heart6":    6,
		"heart7":    7,
		"heart8":    8,
		"heart9":    9,
		"heart10":   10,
		"heartJ":    11,
		"heartQ":    12,
		"heartK":    13,
		"clubA":     14,
		"club2":     15,
		"club3":     16,
		"club4":     17,
		"club5":     18,
		"club6":     19,
		"club7":     20,
		"club8":     21,
		"club9":     22,
		"club10":    23,
		"clubJ":     24,
		"clubQ":     25,
		"clubK":     26,
		"diamondA":  27,
		"diamond2":  28,
		"diamond3":  29,
		"diamond4":  30,
		"diamond5":  31,
		"diamond6":  32,
		"diamond7":  33,
		"diamond8":  34,
		"diamond9":  35,
		"diamond10": 36,
		"diamondJ":  37,
		"diamondQ":  38,
		"diamondK":  39,
		"spadeA":    40,
		"spade2":    41,
		"spade3":    42,
		"spade4":    43,
		"spade5":    44,
		"spade6":    45,
		"spade7":    46,
		"spade8":    47,
		"spade9":    48,
		"spade10":   49,
		"spadeJ":    50,
		"spadeQ":    51,
		"spadeK":    52,
		"joker1":    53,
		"joker2":    54,
	}
)

func (x Poker) Enum() *Poker {
	p := new(Poker)
	*p = x
	return p
}

func (x Poker) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Poker) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_poker_proto_enumTypes[0].Descriptor()
}

func (Poker) Type() protoreflect.EnumType {
	return &file_pb_poker_proto_enumTypes[0]
}

func (x Poker) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Poker.Descriptor instead.
func (Poker) EnumDescriptor() ([]byte, []int) {
	return file_pb_poker_proto_rawDescGZIP(), []int{0}
}

var File_pb_poker_proto protoreflect.FileDescriptor

var file_pb_poker_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x62, 0x2f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x70, 0x62, 0x2a, 0xaa, 0x05, 0x0a, 0x05, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x08,
	0x0a, 0x04, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x72, 0x74, 0x32, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x72, 0x74, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x35, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x72, 0x74, 0x36, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x72, 0x74, 0x37, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x38, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x39, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x72, 0x74, 0x31, 0x30, 0x10,
	0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x72, 0x74, 0x4a, 0x10, 0x0b, 0x12, 0x0a, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x72, 0x74, 0x51, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x4b, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x41, 0x10, 0x0e,
	0x12, 0x09, 0x0a, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x32, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x63,
	0x6c, 0x75, 0x62, 0x33, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x34, 0x10,
	0x11, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x35, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05,
	0x63, 0x6c, 0x75, 0x62, 0x36, 0x10, 0x13, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x37,
	0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x38, 0x10, 0x15, 0x12, 0x09, 0x0a,
	0x05, 0x63, 0x6c, 0x75, 0x62, 0x39, 0x10, 0x16, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x6c, 0x75, 0x62,
	0x31, 0x30, 0x10, 0x17, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x4a, 0x10, 0x18, 0x12,
	0x09, 0x0a, 0x05, 0x63, 0x6c, 0x75, 0x62, 0x51, 0x10, 0x19, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6c,
	0x75, 0x62, 0x4b, 0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x41, 0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x32, 0x10,
	0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x33, 0x10, 0x1d, 0x12,
	0x0c, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x34, 0x10, 0x1e, 0x12, 0x0c, 0x0a,
	0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x35, 0x10, 0x1f, 0x12, 0x0c, 0x0a, 0x08, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x36, 0x10, 0x20, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x37, 0x10, 0x21, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x38, 0x10, 0x22, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x39, 0x10, 0x23, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x31, 0x30,
	0x10, 0x24, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x4a, 0x10, 0x25,
	0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x51, 0x10, 0x26, 0x12, 0x0c,
	0x0a, 0x08, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x4b, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06,
	0x73, 0x70, 0x61, 0x64, 0x65, 0x41, 0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x64,
	0x65, 0x32, 0x10, 0x29, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x64, 0x65, 0x33, 0x10, 0x2a,
	0x12, 0x0a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x64, 0x65, 0x34, 0x10, 0x2b, 0x12, 0x0a, 0x0a, 0x06,
	0x73, 0x70, 0x61, 0x64, 0x65, 0x35, 0x10, 0x2c, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x64,
	0x65, 0x36, 0x10, 0x2d, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x64, 0x65, 0x37, 0x10, 0x2e,
	0x12, 0x0a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x64, 0x65, 0x38, 0x10, 0x2f, 0x12, 0x0a, 0x0a, 0x06,
	0x73, 0x70, 0x61, 0x64, 0x65, 0x39, 0x10, 0x30, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x64,
	0x65, 0x31, 0x30, 0x10, 0x31, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x64, 0x65, 0x4a, 0x10,
	0x32, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x70, 0x61, 0x64, 0x65, 0x51, 0x10, 0x33, 0x12, 0x0a, 0x0a,
	0x06, 0x73, 0x70, 0x61, 0x64, 0x65, 0x4b, 0x10, 0x34, 0x12, 0x0a, 0x0a, 0x06, 0x6a, 0x6f, 0x6b,
	0x65, 0x72, 0x31, 0x10, 0x35, 0x12, 0x0a, 0x0a, 0x06, 0x6a, 0x6f, 0x6b, 0x65, 0x72, 0x32, 0x10,
	0x36, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pb_poker_proto_rawDescOnce sync.Once
	file_pb_poker_proto_rawDescData = file_pb_poker_proto_rawDesc
)

func file_pb_poker_proto_rawDescGZIP() []byte {
	file_pb_poker_proto_rawDescOnce.Do(func() {
		file_pb_poker_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_poker_proto_rawDescData)
	})
	return file_pb_poker_proto_rawDescData
}

var file_pb_poker_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_poker_proto_goTypes = []interface{}{
	(Poker)(0), // 0: pb.Poker
}
var file_pb_poker_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pb_poker_proto_init() }
func file_pb_poker_proto_init() {
	if File_pb_poker_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_poker_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_poker_proto_goTypes,
		DependencyIndexes: file_pb_poker_proto_depIdxs,
		EnumInfos:         file_pb_poker_proto_enumTypes,
	}.Build()
	File_pb_poker_proto = out.File
	file_pb_poker_proto_rawDesc = nil
	file_pb_poker_proto_goTypes = nil
	file_pb_poker_proto_depIdxs = nil
}
